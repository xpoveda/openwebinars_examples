package com.openwebinars.hibernate.hbnpost.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;

import org.springframework.stereotype.Repository;

import com.openwebinars.hibernate.hbnpost.model.Comment;
import com.openwebinars.hibernate.hbnpost.model.Post;
import com.openwebinars.hibernate.hbnpost.model.User;


@Repository
@Transactional
public class CommentDao {
	
	@PersistenceContext
	private EntityManager entityManager;
	
	
	/**
	 * Almacena el comentario en la base de datos
	 */
	public void create(Comment comment) {
		entityManager.persist(comment);
		return;
	}

	/**
	 * Elimina el post de la base de datos.
	 */
	public void delete(Post post) {
		if (entityManager.contains(post))
			entityManager.remove(post);
		else
			entityManager.remove(entityManager.merge(post));
		return;
	}

	/**
	 * Devuelve todos los post de la base de datos.
	 */
	@SuppressWarnings("unchecked")
	public List<Post> getAll() {
		//return entityManager.createQuery("select p from Post p").getResultList();
		return entityManager.createQuery("select p from Post p INNER JOIN FETCH p.comments").getResultList();
		
	}

	/**
	 * Devuelve un post en base a su Id
	 */
	public Post getById(long id) {
		return entityManager.find(Post.class, id);
	}

	/**
	 * Actualiza el usuario proporcionado
	 */
	public Post update(Post post) {
		return entityManager.merge(post);
	}
	
	public Post refresh(Post post) {
		entityManager.refresh(post);
		return post;
	}
	
	/**
	 * Devuelve los post escritos por un usuario
	 */	
	@SuppressWarnings("unchecked")
	public List<Post> getByAuthor(User user) {
		return entityManager.createQuery("select p from Post p where p.autor :autor")
				.setParameter("autor", user)
				.getResultList();
		
		
	}

	

}
