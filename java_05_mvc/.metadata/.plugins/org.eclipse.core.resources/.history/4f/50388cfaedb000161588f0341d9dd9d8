package com.openwebinars.springrest;

import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;

@Configuration
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

	private final String realmName = "MY_REALMNAME";

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.inMemoryAuthentication().withUser("luismi").password("lopez").roles("USER", "ADMIN");
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		/*
		 * http .httpBasic().and() .authorizeRequests()
		 * .antMatchers(HttpMethod.GET, "/api/hello").hasAnyRole("ADMIN","USER")
		 * .and().csrf().disable();
		 */

		/*
		 * http.csrf().disable()
		 * .httpBasic().realmName(realmName).authenticationEntryPoint(
		 * getBasicAuthenticationEntryPoint())
		 * .and().sessionManagement().sessionCreationPolicy(
		 * SessionCreationPolicy.STATELESS);
		 */

		http.csrf().disable().authorizeRequests().antMatchers("/user/**").hasRole("ADMIN").and().httpBasic()
				.realmName(REALM).authenticationEntryPoint(getBasicAuthEntryPoint()).and().sessionManagement()
				.sessionCreationPolicy(SessionCreationPolicy.STATELESS);

	}

	private BasicAuthenticationEntryPoint getBasicAuthenticationEntryPoint() {
		BasicAuthenticationEntryPoint b = new BasicAuthenticationEntryPoint();
		b.setRealmName(realmName);
		return b;
	}

}
