package com.openwebinars.springrest;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;

@Configuration
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

	private final String REALMNAME = "MY_REALMNAME";

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.inMemoryAuthentication().withUser("luismi").password("lopez").roles("USER", "ADMIN")
			.and().withUser("pepe").password("perez").roles("ADMIN");
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		

		http.csrf().disable().authorizeRequests().antMatchers("/api/hello").hasAnyRole("ADMIN","USER").and().httpBasic()
				.realmName(REALMNAME).authenticationEntryPoint(getBasicAuthenticationEntryPoint()).and().sessionManagement()
				.sessionCreationPolicy(SessionCreationPolicy.STATELESS);

	}

	private BasicAuthenticationEntryPoint getBasicAuthenticationEntryPoint() {
		BasicAuthenticationEntryPoint b = new BasicAuthenticationEntryPoint();
		b.setRealmName(REALMNAME);
		return b;
	}

}
